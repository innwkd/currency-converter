// Code generated by mockery v1.0.0. DO NOT EDIT.

package types

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockRateStorage is an autogenerated mock type for the RateStorage type
type MockRateStorage struct {
	mock.Mock
}

// Get provides a mock function with given fields: pair
func (_m *MockRateStorage) Get(pair CurrencyPair) (CurrencyRate, error) {
	ret := _m.Called(pair)

	var r0 CurrencyRate
	if rf, ok := ret.Get(0).(func(CurrencyPair) CurrencyRate); ok {
		r0 = rf(pair)
	} else {
		r0 = ret.Get(0).(CurrencyRate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(CurrencyPair) error); ok {
		r1 = rf(pair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *MockRateStorage) GetAll() ([]CurrencyRate, error) {
	ret := _m.Called()

	var r0 []CurrencyRate
	if rf, ok := ret.Get(0).(func() []CurrencyRate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]CurrencyRate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: pair, rate, duration
func (_m *MockRateStorage) Set(pair CurrencyPair, rate CurrencyRate, duration time.Duration) (CurrencyRate, error) {
	ret := _m.Called(pair, rate, duration)

	var r0 CurrencyRate
	if rf, ok := ret.Get(0).(func(CurrencyPair, CurrencyRate, time.Duration) CurrencyRate); ok {
		r0 = rf(pair, rate, duration)
	} else {
		r0 = ret.Get(0).(CurrencyRate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(CurrencyPair, CurrencyRate, time.Duration) error); ok {
		r1 = rf(pair, rate, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
